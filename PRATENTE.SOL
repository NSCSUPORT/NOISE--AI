// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

contract HoloNet7 {
    // Informações do proprietário
    address public owner;
    string public providerName;
    
    // Estrutura para armazenar provedores
    struct Provider {
        string name;
        uint256 downloadSpeed; // em Mbps
        uint256 uploadSpeed;   // em Mbps
        uint256 cost;          // Custo mensal em USD
    }
    
    // Mapeamento de provedores
    mapping(address => Provider) public providers;
    address[] public providerAddresses;

    // Eventos
    event ProviderAdded(address indexed providerAddress, string name, uint256 downloadSpeed, uint256 uploadSpeed, uint256 cost);
    event ProviderUpdated(address indexed providerAddress, uint256 downloadSpeed, uint256 uploadSpeed, uint256 cost);

    // Modificador para restringir funções ao proprietário
    modifier onlyOwner() {
        require(msg.sender == owner, "Apenas o proprietário pode realizar esta ação.");
        _;
    }

    // Construtor do contrato
    constructor() {
        owner = msg.sender; // Define o criador do contrato como proprietário
        providerName = "HoloNet-7";
    }

    // Função para adicionar um provedor
    function addProvider(string memory _name, uint256 _downloadSpeed, uint256 _uploadSpeed, uint256 _cost) public {
        Provider memory newProvider = Provider({
            name: _name,
            downloadSpeed: _downloadSpeed,
            uploadSpeed: _uploadSpeed,
            cost: _cost
        });

        providers[msg.sender] = newProvider;
        providerAddresses.push(msg.sender);
        
        emit ProviderAdded(msg.sender, _name, _downloadSpeed, _uploadSpeed, _cost);
    }

    // Função para atualizar as informações do provedor
    function updateProvider(uint256 _downloadSpeed, uint256 _uploadSpeed, uint256 _cost) public {
        require(providers[msg.sender].downloadSpeed != 0, "Provedor não encontrado.");
        
        providers[msg.sender].downloadSpeed = _downloadSpeed;
        providers[msg.sender].uploadSpeed = _uploadSpeed;
        providers[msg.sender].cost = _cost;

        emit ProviderUpdated(msg.sender, _downloadSpeed, _uploadSpeed, _cost);
    }

    // Função para obter informações do provedor
    function getProviderInfo(address _provider) public view returns (string memory, uint256, uint256, uint256) {
        Provider memory p = providers[_provider];
        return (p.name, p.downloadSpeed, p.uploadSpeed, p.cost);
    }
}
